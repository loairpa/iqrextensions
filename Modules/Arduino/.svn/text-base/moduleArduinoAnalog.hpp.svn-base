#ifndef MODULEARDUINOANALOG_HPP
#define MODULEARDUINOANALOG_HPP


#include <Common/Item/threadModule.hpp>
#include <sys/time.h>
#include "arduino.h"

using namespace std;
namespace iqrcommon{
	class ClsModuleArduino : public ClsThreadModule{
		public:
			ClsModuleArduino();
			void init();
			void update();
			void cleanup();

			/*void start();
			void stop();
			static void* run(void *arg);*/
	    //moduleIcon getIcon();

		private:
			ClsModuleArduino(const ClsModuleArduino&);

	    StateVariablePtr* var_digital_command_readout;
	    ClsStateVariable* var_digital_read;
	    StateVariablePtr* var_digital_command_writing;
	    StateVariablePtr* var_digital_write;
	    StateVariablePtr* var_analog_command_writing;
	    StateVariablePtr* var_analog_write;
	    StateVariablePtr* var_analog_command_reading;
	    ClsStateVariable* var_analog_read;

	    //ClsIntParameter* port;
\

	    Arduino arduino;

	    ClsStringParameter *device_name;

	    struct timeval time_init;
	    int elapsed_cicles;
	    ClsIntParameter *par_cps,*var_analog_speed, *var_light_limit;

	    void checkWidth(StateArray& group, int width,
			    const string& group_name);

	    void relax();

	    void vectorToGroup(vector<float> origin, StateArray& destination);


	};
}


#endif // MODULEARDUINONEW_HPP
